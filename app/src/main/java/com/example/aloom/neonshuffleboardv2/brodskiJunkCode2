package com.example.aloom.neonshuffleboardv2;


import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.TimeInterpolator;
import android.graphics.RectF;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.support.constraint.ConstraintLayout;
import android.support.v4.view.GestureDetectorCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.DecelerateInterpolator;
import android.widget.ImageView;
import android.widget.Toast;

public class NSBGameActivity extends AppCompatActivity {
    private final String TAG = "PuckAnimatorActivity";
    AnimatorSet animatePuckProperties;
    ObjectAnimator returnToStartingYPosition;
    ObjectAnimator returnToStartingXPosition;
    ConstraintLayout gameView;
    float flingDistance;
    float downXPOS;
    float downYPOS;
    float upXPOS;
    float upYPOS;
    float xVelocity;
    float yVelocity;
    float dx;
    float dy;
    int puckClock = 0;
    int maxDuration = 30000;
    int puckSpawnX, puckSpawnY; // Another thing I added.
    RectF touchZone;
    ImageView redPuck1;
    ImageView redPuck2;
    ImageView redPuck3;
    ImageView bluePuck1;
    ImageView bluePuck2;
    ImageView bluePuck3;
    float puckCenter;

    View.OnTouchListener puckListener;
    GestureDetector mDetector;
    ImageView[] puckCycleList;

    Handler h = new Handler(); //Thing I added

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_nsbgame);
        redPuck1 = (ImageView) findViewById(R.id.redPuck1);
        redPuck2 = (ImageView) findViewById(R.id.redPuck2);
        redPuck3 = (ImageView) findViewById(R.id.redPuck3);
        bluePuck1 = (ImageView) findViewById(R.id.bluePuck1);
        bluePuck2 = (ImageView) findViewById(R.id.bluePuck2);
        bluePuck3 = (ImageView) findViewById(R.id.bluePuck3);
        initialVisibility();
        puckCycleList = new ImageView[]{redPuck1, redPuck2, redPuck3, bluePuck1, bluePuck2, bluePuck3};
        puckCycleList[puckClock].setClickable(true);
        puckCenter = (puckCycleList[puckClock].getTop() + puckCycleList[puckClock].getBottom()) / 2;
        gameView = (ConstraintLayout) findViewById(R.id.nsbGame);
        mDetector = new GestureDetector(this, new PuckGestureListener());
        listenForTouchOnPuck();

        puckCycleList[puckClock].setOnTouchListener(puckListener);
        puckCycleList[puckClock].setClickable(true);
 //       puckCycleList[puckClock].setOnTouchListener(new View.OnTouchListener() {
 //           @Override
   //         public boolean onTouch(View v, MotionEvent event) {
   //             return mDetector.onTouchEvent(event);
     //       }
  //      });
    }
    Runnable r = new Runnable() {
        @Override
        public void run() {
            Toast.makeText(getApplicationContext(), "RUNNABLE TOAST !!!" , Toast.LENGTH_SHORT).show();
            checkEndOfRound();
        }
    };

    public void checkEndOfRound() {
        if (puckClock == 6) {
            puckClock = 0;
            for (int i =0; i<6; i++) {
                ObjectAnimator resetX = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.X, puckSpawnX);
                ObjectAnimator resetY = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.Y, puckSpawnY);
                animatePuckProperties.playTogether(resetX, resetY);
                animatePuckProperties.setInterpolator(new DecelerateInterpolator(10));
                animatePuckProperties.setStartDelay(0);
                animatePuckProperties.setDuration(1);
                animatePuckProperties.start();
                playSound(R.raw.realisticslide2);
            }
            //animatePuckProperties.cancel();
            float puckY = (puckCycleList[puckClock].getTop() + puckCycleList[puckClock].getBottom()) / 2;
            float puckX = (puckCycleList[puckClock].getLeft() + puckCycleList[puckClock].getRight()) / 2;
  //          ObjectAnimator resetX = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.X, puckX);
//            ObjectAnimator resetY = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.Y, puckY);
           // puckCycleList[0].setClickable(true); //dont need?
        }
    }
/*
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        this.mDetector.onTouchEvent(event);
        return super.onTouchEvent(event);
    }
    */
    public void listenForTouchOnPuck() {
         puckListener = new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                return mDetector.onTouchEvent(event);
            }
        };
    }

    class PuckGestureListener extends GestureDetector.SimpleOnGestureListener {
        private static final String DEBUG_TAG = "Gestures"; //for Log.d
        private final int VELOCITY_TRIGGER = 0;
        private final int DIST_TRIGGER = 190;

        @Override
        public boolean onDown(MotionEvent event) {
            Log.d(DEBUG_TAG, "onDown: " + event.toString());
            return true;    //needed so all gestures are checked
        }

        @Override
        public boolean onFling(MotionEvent fingerDown, MotionEvent move, float velocityX, float velocityY) {
            xVelocity = (float) (velocityX * .00025);
            yVelocity = (float) (velocityY * .00025);
            downXPOS = fingerDown.getX();
            downYPOS = fingerDown.getY();
            upXPOS = move.getX();
            upYPOS = move.getY();
            dx = (upXPOS - downXPOS);
            dy = (upYPOS - downYPOS);
            calculateDistance();
            animatePuck();
            puckClock++;
            if (puckClock < 6) {
                puckCycleList[puckClock].setVisibility(View.VISIBLE);
                puckCycleList[puckClock].setOnTouchListener(puckListener);
                puckCycleList[puckClock].setClickable(true);
            }
            else {
                //puckCycleList[puckClock].setClickable(false);
                long  timeDelay;
                if (xVelocity >= yVelocity){
                    timeDelay = (long) (xVelocity * flingDistance);
                } else {
                    timeDelay = (long) (yVelocity * flingDistance); }
                Log.d(TAG, "timeDelay " + timeDelay);
                h.postDelayed(r, timeDelay);
            }
          //  checkEndOfRound();
            Log.d(TAG, "Puck clock Value " + puckClock);
            Log.d(DEBUG_TAG, "onFling: " + velocityX + " --- " + fingerDown.toString() + move.toString());
            Log.d(DEBUG_TAG, "         x0=" + fingerDown.getX() + "   x1=" + move.getX());
            Log.i(TAG, "____FLING INITIATED____");
            Log.d(TAG, "XPOS finger down:  " + downXPOS);
            Log.d(TAG, "YPOS finger down:  " + downYPOS);
        //    Log.d(TAG, "puck left x: " + puckCycleList[puckClock].getLeft());
       //     Log.d(TAG, "puck right x: " + puckCycleList[puckClock].getRight());
      //      Log.d(TAG, "puck top y: " + puckCycleList[puckClock].getTop());
     //       Log.d(TAG, "puck bottom y : " + puckCycleList[puckClock].getBottom());
            Log.d(TAG, "End X POS:  " + upXPOS);
            Log.d(TAG, "End Y POS:  " + upYPOS);
            Log.d(TAG, "End Y POS:  " + upYPOS);
            Log.d(TAG, "Velocity X:  " + velocityX);
            Log.d(TAG, "Velocity Y:  " + velocityY);
            return true;
        }

        public void animatePuck() {
            int SCREEN_BOTTOM_BOUNDS = gameView.getBottom();
            int SCREEN_TOP_BOUNDS = gameView.getTop();
            puckCycleList[puckClock].setAdjustViewBounds(true);
            int PUCK_TOP = puckCycleList[puckClock].getTop();
            int PUCK_BOTTOM = puckCycleList[puckClock].getBottom();
            int[] puckXYLocation = new int[2];
            puckCycleList[puckClock].getLocationOnScreen(puckXYLocation);
            int puckXPOS = puckXYLocation[0];
            int puckYPOS = puckXYLocation[1];
            puckSpawnX = puckXYLocation[0]; // I added this to get the initial spawn. I dont know why but I can't do this in "onCreate"
            puckSpawnY = puckXYLocation[1]; //And I added this
            int bottomBoundary = SCREEN_BOTTOM_BOUNDS - PUCK_BOTTOM;
            int topBoundary = SCREEN_TOP_BOUNDS + PUCK_TOP;
            Log.d(TAG, "SCREEN_BOTTOM_BOUNDS:  " + SCREEN_BOTTOM_BOUNDS);
            Log.d(TAG, "SCREEN_TOP_BOUNDS:  " + SCREEN_TOP_BOUNDS);
            Log.d(TAG, "PUCK_TOP:  " + PUCK_TOP);
            Log.d(TAG, "PUCK_BOTTOM:  " + PUCK_BOTTOM);
            Log.d(TAG, "puck y pos:  " + puckYPOS);
            Log.d(TAG, "puck x pos:  " + puckXPOS);
            Log.d(TAG, "bottomBoundary:  " + bottomBoundary);
            Log.d(TAG, "topBoundary:  " + topBoundary);
            Log.d(TAG, "initial bottom boundary:  " + bottomBoundary);
            Log.d(TAG, "Puck: " + puckCycleList[puckClock]);
            ObjectAnimator animY = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.TRANSLATION_Y, flingDistance * yVelocity);
            ObjectAnimator animX = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.TRANSLATION_X, flingDistance * xVelocity);
           // ObjectAnimator animZ = ObjectAnimator.ofFloat(puckCycleList[puckClock], View.TRANSLATION_Z, flingDistance * 2000);
            ObjectAnimator scaleX = ObjectAnimator.ofFloat(puckCycleList[puckClock], ImageView.SCALE_X, (float) .77);
            ObjectAnimator scaleY = ObjectAnimator.ofFloat(puckCycleList[puckClock], ImageView.SCALE_Y, (float) .77);
            Log.d(TAG, "!!!!!!!!!flingDistance * xVelocity " + (flingDistance * xVelocity));
            animatePuckProperties = new AnimatorSet();
            animatePuckProperties.setInterpolator(new DecelerateInterpolator(10));
            animatePuckProperties.setStartDelay(0);
            animatePuckProperties.playTogether(animY, animX, scaleX, scaleY);
            animatePuckProperties.setDuration(maxDuration);
            animatePuckProperties.start();
            playSound(R.raw.realisticslide2);

        }
    }



    public void initialVisibility() {
        redPuck2.setVisibility(View.GONE);
        redPuck3.setVisibility(View.GONE);
        bluePuck1.setVisibility(View.GONE);
        bluePuck2.setVisibility(View.GONE);
        bluePuck3.setVisibility(View.GONE);
    }
    public void calculateDistance() {
        Log.d(TAG, "initial x pos: " + downXPOS);
        Log.d(TAG, "initial y pos: " + downYPOS);
        flingDistance = (float) Math.sqrt((dx * dx) + (dy * dy));
    }
    private void playSound(int soundID) {
        MediaPlayer soundPlayer = MediaPlayer.create(this, soundID);
        soundPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mp) {
                mp.release();
            }
        });
        soundPlayer.start();
    }

/* @Override
    public void onResume() {
        super.onResume();
        final Thread gameThread = new Thread(new Runnable() {

            @Override
            public void run() {
                checkEndOfRound();
            }
        });
        gameThread.start();
    }   */

    //------------------------------------
   // -------------------------------------
  //  --------------------------------
 //   ----------------------------------
//    ---------------



}






/*
    public void resetRound() {
        initialVisibility();
        puckClock = 0;
        puckCycleList[puckClock].setVisibility(View.GONE);
        puckCycleList[puckClock].setClickable(true);
        for (int i = 0; i < puckCycleList.length; i++) {
            if(i>=1 && i < 5){
                puckCycleList[i].setClickable(false);
            }
            ObjectAnimator resetX = ObjectAnimator.ofFloat(puckCycleList[i], View.TRANSLATION_X, puckX);
            ObjectAnimator resetY = ObjectAnimator.ofFloat(puckCycleList[i], View.TRANSLATION_Y, puckY);
            animatePuckProperties.playTogether(resetX, resetY);
            animatePuckProperties.setStartDelay(0);
            animatePuckProperties.setDuration(1);
            animatePuckProperties.start();
        }
    }




            TimeInterpolator timeOfAnim = scaleX.getInterpolator();
            animX.addListener(new AnimatorListenerAdapter() {

                @Override
                public void onAnimationStart(Animator animation) {
     //               Toast.makeText(getApplicationContext(), "ANIMATION START XD!!!" , Toast.LENGTH_SHORT).show();
                }

                @Override
                public void onAnimationEnd(Animator animation) {
                    Toast.makeText(getApplicationContext(), "ANIMATION END!!!" , Toast.LENGTH_SHORT).show();
                }
            });




*/